{"ast":null,"code":"// index.js\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const uploadForm = document.getElementById('upload-form');\n  const fileInput = document.getElementById('file-input');\n  const resultContainer = document.getElementById('result-container');\n  uploadForm.addEventListener('submit', async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('file', fileInput.files[0]);\n    try {\n      const response = await fetch('http://localhost:5000/upload', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n      const data = await response.json();\n\n      // Display the analysis results\n      resultContainer.innerHTML = `\n              <h2>Analysis Results</h2>\n              <p><strong>Sentiment:</strong> ${data.sentiment}</p>\n              <p><strong>Keywords:</strong> ${data.keywords.join(', ')}</p>\n              <p><strong>Score:</strong> ${data.score}</p>\n              <p><strong>Uploaded File:</strong> ${data.filename}</p>\n              <p><strong>Upload Date:</strong> ${data.upload_date}</p>\n          `;\n    } catch (error) {\n      console.error('Error:', error.message);\n    }\n  });\n});","map":{"version":3,"names":["document","addEventListener","uploadForm","getElementById","fileInput","resultContainer","e","preventDefault","formData","FormData","append","files","response","fetch","method","body","ok","Error","data","json","innerHTML","sentiment","keywords","join","score","filename","upload_date","error","console","message"],"sources":["/home/ugrads/majors/hiwot/Multimedia/client/src/index.js"],"sourcesContent":["// index.js\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const uploadForm = document.getElementById('upload-form');\n  const fileInput = document.getElementById('file-input');\n  const resultContainer = document.getElementById('result-container');\n\n  uploadForm.addEventListener('submit', async (e) => {\n      e.preventDefault();\n\n      const formData = new FormData();\n      formData.append('file', fileInput.files[0]);\n\n      try {\n          const response = await fetch('http://localhost:5000/upload', {\n              method: 'POST',\n              body: formData\n          });\n\n          if (!response.ok) {\n              throw new Error('Upload failed');\n          }\n\n          const data = await response.json();\n\n          // Display the analysis results\n          resultContainer.innerHTML = `\n              <h2>Analysis Results</h2>\n              <p><strong>Sentiment:</strong> ${data.sentiment}</p>\n              <p><strong>Keywords:</strong> ${data.keywords.join(', ')}</p>\n              <p><strong>Score:</strong> ${data.score}</p>\n              <p><strong>Uploaded File:</strong> ${data.filename}</p>\n              <p><strong>Upload Date:</strong> ${data.upload_date}</p>\n          `;\n      } catch (error) {\n          console.error('Error:', error.message);\n      }\n  });\n});\n\n"],"mappings":"AAAA;;AAEAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;EAClD,MAAMC,UAAU,GAAGF,QAAQ,CAACG,cAAc,CAAC,aAAa,CAAC;EACzD,MAAMC,SAAS,GAAGJ,QAAQ,CAACG,cAAc,CAAC,YAAY,CAAC;EACvD,MAAME,eAAe,GAAGL,QAAQ,CAACG,cAAc,CAAC,kBAAkB,CAAC;EAEnED,UAAU,CAACD,gBAAgB,CAAC,QAAQ,EAAE,MAAOK,CAAC,IAAK;IAC/CA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEN,SAAS,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC;IAE3C,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;QACzDC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEP;MACV,CAAC,CAAC;MAEF,IAAI,CAACI,QAAQ,CAACI,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;MACpC;MAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;;MAElC;MACAd,eAAe,CAACe,SAAS,GAAI;AACvC;AACA,+CAA+CF,IAAI,CAACG,SAAU;AAC9D,8CAA8CH,IAAI,CAACI,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAE;AACvE,2CAA2CL,IAAI,CAACM,KAAM;AACtD,mDAAmDN,IAAI,CAACO,QAAS;AACjE,iDAAiDP,IAAI,CAACQ,WAAY;AAClE,WAAW;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC1C;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}